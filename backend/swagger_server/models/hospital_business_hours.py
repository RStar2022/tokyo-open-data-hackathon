# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class HospitalBusinessHours(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, day: str=None, _from: str=None, to: str=None):  # noqa: E501
        """HospitalBusinessHours - a model defined in Swagger

        :param day: The day of this HospitalBusinessHours.  # noqa: E501
        :type day: str
        :param _from: The _from of this HospitalBusinessHours.  # noqa: E501
        :type _from: str
        :param to: The to of this HospitalBusinessHours.  # noqa: E501
        :type to: str
        """
        self.swagger_types = {
            'day': str,
            '_from': str,
            'to': str
        }

        self.attribute_map = {
            'day': 'day',
            '_from': 'from',
            'to': 'to'
        }
        self._day = day
        self.__from = _from
        self._to = to

    @classmethod
    def from_dict(cls, dikt) -> 'HospitalBusinessHours':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Hospital_businessHours of this HospitalBusinessHours.  # noqa: E501
        :rtype: HospitalBusinessHours
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day(self) -> str:
        """Gets the day of this HospitalBusinessHours.


        :return: The day of this HospitalBusinessHours.
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day: str):
        """Sets the day of this HospitalBusinessHours.


        :param day: The day of this HospitalBusinessHours.
        :type day: str
        """
        allowed_values = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"]  # noqa: E501
        if day not in allowed_values:
            raise ValueError(
                "Invalid value for `day` ({0}), must be one of {1}"
                .format(day, allowed_values)
            )

        self._day = day

    @property
    def _from(self) -> str:
        """Gets the _from of this HospitalBusinessHours.


        :return: The _from of this HospitalBusinessHours.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from: str):
        """Sets the _from of this HospitalBusinessHours.


        :param _from: The _from of this HospitalBusinessHours.
        :type _from: str
        """

        self.__from = _from

    @property
    def to(self) -> str:
        """Gets the to of this HospitalBusinessHours.


        :return: The to of this HospitalBusinessHours.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to: str):
        """Sets the to of this HospitalBusinessHours.


        :param to: The to of this HospitalBusinessHours.
        :type to: str
        """

        self._to = to
